image:
  registry: {{ harbor_hostname }}
  repository: prometheus/node-exporter
  tag: ""
  pullPolicy: IfNotPresent
  digest: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
kubeRBACProxy:
  enabled: false
  image:
    registry: {{ harbor_hostname }}
    repository: brancz/kube-rbac-proxy
    tag: v0.14.0
    sha: ""
    pullPolicy: IfNotPresent
  extraArgs: []
  containerSecurityContext: {}
  resources: {}
service:
  type: ClusterIP
  port: 9100
  targetPort: 9100
  nodePort:
  portName: metrics
  listenOnAllInterfaces: true
  annotations:
    prometheus.io/scrape: "true"
networkPolicy:
  enabled: false
env: {}
prometheus:
  monitor:
    enabled: false
    additionalLabels: {}
    namespace: ""
    jobLabel: ""
    podTargetLabels: []
    scheme: http
    basicAuth: {}
    bearerTokenFile:
    tlsConfig: {}
    proxyUrl: ""
    selectorOverride: {}
    attachMetadata:
      node: false
    relabelings: []
    metricRelabelings: []
    interval: ""
    scrapeTimeout: 10s
    apiVersion: ""
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0
  podMonitor:
    enabled: false
    namespace: ""
    additionalLabels: {}
    podTargetLabels: []
    apiVersion: ""
    selectorOverride: {}
    attachMetadata:
      node: false
    jobLabel: ""
    scheme: "http"
    path: "/metrics"
    basicAuth: {}
    bearerTokenSecret: {}
    tlsConfig: {}
    authorization: {}
    oauth2: {}
    proxyUrl: ""
    interval: ""
    scrapeTimeout: ""
    honorTimestamps: true
    honorLabels: true
    enableHttp2: ""
    filterRunning: ""
    followRedirects: ""
    params: {}
    relabelings: []
    metricRelabelings: []
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
resources: {}
serviceAccount:
  create: true
  name:
  annotations: {}
  imagePullSecrets: []
  automountServiceAccountToken: false
securityContext:
  fsGroup: 65534
  runAsGroup: 65534
  runAsNonRoot: true
  runAsUser: 65534
containerSecurityContext:
  readOnlyRootFilesystem: true
rbac:
  create: true
  pspEnabled: true
  pspAnnotations: {}
endpoints: []
hostNetwork: true
hostPID: true
hostRootFsMount:
  enabled: true
  mountPropagation: HostToContainer
affinity: {}
podAnnotations:
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
podLabels: {}
daemonsetAnnotations: {}
releaseLabel: false
dnsConfig: {}
nodeSelector:
  kubernetes.io/os: linux
tolerations:
  - effect: NoSchedule
    operator: Exists
extraArgs: []
extraHostVolumeMounts: []
configmaps: []
secrets: []
namespaceOverride: ""
sidecars: []
sidecarVolumeMount: []
sidecarHostVolumeMounts: []
extraInitContainers: []
livenessProbe:
  failureThreshold: 3
  httpGet:
    httpHeaders: []
    scheme: http
  initialDelaySeconds: 0
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
readinessProbe:
  failureThreshold: 3
  httpGet:
    httpHeaders: []
    scheme: http
  initialDelaySeconds: 0
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
verticalPodAutoscaler:
  enabled: false
  controlledResources: []
  maxAllowed: {}
  minAllowed: {}
